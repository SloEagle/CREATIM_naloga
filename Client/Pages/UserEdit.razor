@page "/user/{id:int}"
@inject IUserService UserService
@inject IGroupService GroupService
@inject ISmsService SmsService
@inject NavigationManager NavigationManager
@inject ILogger<User> Logger
@inject IJSRuntime JSRuntime

<h3>User</h3>

@if (UserService.User == null || GroupService.Groups == null)
{
    <span>Loading...</span>
}
else
{
    <EditForm Model="UserService.User" OnValidSubmit="UpdateUser">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="mb-0">
                <label for="name">Name</label>
                <InputText id="name" @bind-Value="UserService.User.Name" class="form-control"></InputText>
            </div>
            <div class="mb-0">
                <label for="email">E-Mail</label>
                <InputText id="email" @bind-Value="UserService.User.Email" class="form-control"></InputText>
            </div>
            <div class="mb-0">
                <label for="phone">Phone number</label>
                <InputText id="phone" @bind-Value="UserService.User.PhoneNumber" class="form-control"></InputText>
            </div>
            <div class="form-check">
                <label for="bussiness">Bussiness</label>
                <InputCheckbox id="bussiness" @bind-Value="UserService.User.Bussiness" class="form-check-input"></InputCheckbox>
            </div>
            <div class="mb-0">
                <label for="tax">Tax number</label>
                <InputText id="tax" @bind-Value="UserService.User.TaxNumber" class="form-control" disabled="@(!UserService.User.Bussiness)"></InputText>
            </div>
            <div class="mb-0">
                <label for="group">Group</label>
                <InputSelect id="group" @bind-Value="UserService.User.GroupId" class="form-control">
                    @foreach (var group in GroupService.Groups)
                    {
                        <option value="@group.Id">@group.Name</option>
                    }
                </InputSelect>
            </div>
        </div>

        <br />

        <button type="submit" class="btn btn-primary">
            <i class="oi oi-plus"></i> Save
        </button>
        <button type="button" class="btn btn-primary" @onclick="() => SendSMSTest(UserService.User)">
            Send SMS (provider testing)
        </button>
        <ValidationSummary />
    </EditForm>

    <br />

    <SmsInput MessageBody="@SmsMessage" MessageFrom="@SmsFrom" @ref="smsInput"></SmsInput>

    <br />

    <button type="button" class="btn btn-primary" @onclick="() => SendSMS(UserService.User)">
        Send 
    </button>
}

@code {
    [Parameter]
    public int Id { get; set; }

    public string SmsMessage { get; set; } = "Input SMS body text here...";
    public string SmsFrom { get; set; } = "Send from...";
    SmsInput smsInput { get; set; } = new SmsInput();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await UserService.GetUser(Id);
            await GroupService.GetGroups();
            await SmsService.GetProvider();

            Logger.LogInformation("Data retrieved.");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.ToString());
        }
    }

    private async Task UpdateUser()
    {
        try
        {
            if (Id <= 0)
            {
                await UserService.AddUser(UserService.User);

                Logger.LogInformation("User added.");
            }
            else
            {
                await UserService.UpdateUser(UserService.User);

                Logger.LogInformation("User updated.");
            }

            NavigationManager.NavigateTo("/users");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.ToString());
        }
    }

    private async Task SendSMSTest(CREATIM_naloga.Shared.Models.User user)
    {
        try
        {
            var sms = new Sms()
                {
                    To = "Provider count test",
                    From = smsInput.MessageFrom,
                    Body = smsInput.MessageBody
                };

            await SmsService.SendSMS(sms);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.ToString());
        }
    }

    private async Task SendSMS(CREATIM_naloga.Shared.Models.User user)
    {
        try
        {
            var sms = new Sms()
                {
                    To = user.Name,
                    From = smsInput.MessageFrom,
                    Body = smsInput.MessageBody
                };

            await SmsService.SendSMS(sms);

            Logger.LogInformation("SMS sent.");
            await JSRuntime.InvokeVoidAsync("alert", $"SMS sent.");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.ToString());
            await JSRuntime.InvokeVoidAsync("alert", $"SMS NOT sent.");
        }
    }
}


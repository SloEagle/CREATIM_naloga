@page "/users"
@inject IUserService UserService
@inject ISmsService SmsService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILogger<Users> Logger

<h3>Users</h3>

<SmsInput MessageBody="@SmsMessage" MessageFrom="@SmsFrom" @ref="smsInput"></SmsInput>

<br />
<br />

<div class="header">
    <div class="col">Name</div>
    <div class="col">E-Mail</div>
    <div class="col">Phone number</div>
    <div class="col">Bussiness</div>
    <div class="col">Tax number</div>
    <div class="col">Group</div>
    <div class="col">SMS</div>
    <div class="col"></div>
</div>

@if(UserService.Users == null)
{
    <span>Loading...</span>
}
else
{
    @foreach(var user in UserService.Users)
    {
        <div class="row">
            <div class="col">
                @user.Name
            </div>
            <div class="col">
                @user.Email
            </div>
            <div class="col">
                @user.PhoneNumber
            </div>
            <div class="col">
                @user.Bussiness
            </div>
            <div class="col">
                @user.TaxNumber
            </div>
            <div class="col">
                @if (@user.Group == null)
                {
                    @user.Group
                }
                else
                {
                    @user.Group.Name
                }
            </div>
            <div class="col">
                <button class="btn btn-primary" @onclick="(() => SendSMS(user))">
                    <i class="oi oi-envelope-open"></i>
                </button>
            </div>
            <div class="col">
                <button class="btn btn-secondary" @onclick="(() => EditUser(user.Id))">
                    <i class="oi oi-pencil"></i>
                </button>
                <button class="btn btn-secondary" @onclick="(() => DeleteUser(user))">
                    <i class="oi oi-trash"></i>
                </button>
            </div>
        </div>
    }

    <button type="button" class="btn btn-primary" @onclick="AddUser">
        <i class="oi oi-plus"></i> Add user
    </button>
}

@code {
    public string SmsMessage { get; set; } = "Input SMS body text here...";
    public string SmsFrom { get; set; } = "Send from...";
    SmsInput smsInput { get; set; } = new SmsInput();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await UserService.GetUsers();

            Logger.LogInformation("Data retrieved.");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.ToString());
        }
    }

    private void EditUser(int id)
    {
        NavigationManager.NavigateTo($"/user/{id}");
    }

    private async Task DeleteUser(CREATIM_naloga.Shared.Models.User user)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Do you really want to delete user {user.Name}?");
            if (confirmed)
            {
                await UserService.DeleteUser(user.Id);
            }

            Logger.LogInformation("User deleted.");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.ToString());
        }
    }

    private void AddUser()
    {
        NavigationManager.NavigateTo("/user/-1");
    }

    private async Task SendSMS(CREATIM_naloga.Shared.Models.User user)
    {
        try
        {
            var sms = new Sms()
                {
                    To = user.Name,
                    From = smsInput.MessageFrom,
                    Body = smsInput.MessageBody
                };

            await SmsService.SendSMS(sms);

            Logger.LogInformation("SMS sent.");
            await JSRuntime.InvokeVoidAsync("alert", $"SMS sent.");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.ToString());
            await JSRuntime.InvokeVoidAsync("alert", $"SMS NOT sent.");
        }
    }
}
